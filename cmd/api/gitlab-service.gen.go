// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

// Group defines model for Group.
type Group struct {
	FullPath *string `json:"full_path,omitempty"`
	Id       *int32  `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Path     *string `json:"path,omitempty"`
}

// Project defines model for Project.
type Project struct {
	DefaultBranch *string `json:"default_branch,omitempty"`
	GroupId       *int32  `json:"group_id,omitempty"`
	HttpUrlToRepo *string `json:"http_url_to_repo,omitempty"`
	Id            *int32  `json:"id,omitempty"`
	Name          *string `json:"name,omitempty"`
}

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = Project

// CreateProjectFormdataRequestBody defines body for CreateProject for application/x-www-form-urlencoded ContentType.
type CreateProjectFormdataRequestBody = Project

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve the list of available groups
	// (GET /group)
	GetAllGroups(w http.ResponseWriter, r *http.Request)
	// Retrieve the list of subgroups of a group
	// (GET /group/{groupId}/subgroups)
	GetGroupSubgroups(w http.ResponseWriter, r *http.Request, groupId int32)
	// Retrieve the list of projects of a group
	// (GET /groups/{groupId}/projects)
	GetGroupProjects(w http.ResponseWriter, r *http.Request, groupId int32)
	// Retrieve the list of projects
	// (GET /project)
	GetProjects(w http.ResponseWriter, r *http.Request)
	// Create a new project
	// (POST /project)
	CreateProject(w http.ResponseWriter, r *http.Request)
	// Delete a single project
	// (DELETE /project/{projectId})
	DeleteProject(w http.ResponseWriter, r *http.Request, projectId int32)
	// Retrieve a single project
	// (GET /project/{projectId})
	GetProject(w http.ResponseWriter, r *http.Request, projectId int32)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllGroups operation middleware
func (siw *ServerInterfaceWrapper) GetAllGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllGroups(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGroupSubgroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroupSubgroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId int32

	err = runtime.BindStyledParameter("simple", false, "groupId", mux.Vars(r)["groupId"], &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupSubgroups(w, r, groupId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetGroupProjects operation middleware
func (siw *ServerInterfaceWrapper) GetGroupProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId int32

	err = runtime.BindStyledParameter("simple", false, "groupId", mux.Vars(r)["groupId"], &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupProjects(w, r, groupId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId int32

	err = runtime.BindStyledParameter("simple", false, "projectId", mux.Vars(r)["projectId"], &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProject(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId int32

	err = runtime.BindStyledParameter("simple", false, "projectId", mux.Vars(r)["projectId"], &projectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProject(w, r, projectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/group", wrapper.GetAllGroups).Methods("GET")

	r.HandleFunc(options.BaseURL+"/group/{groupId}/subgroups", wrapper.GetGroupSubgroups).Methods("GET")

	r.HandleFunc(options.BaseURL+"/groups/{groupId}/projects", wrapper.GetGroupProjects).Methods("GET")

	r.HandleFunc(options.BaseURL+"/project", wrapper.GetProjects).Methods("GET")

	r.HandleFunc(options.BaseURL+"/project", wrapper.CreateProject).Methods("POST")

	r.HandleFunc(options.BaseURL+"/project/{projectId}", wrapper.DeleteProject).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/project/{projectId}", wrapper.GetProject).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTW/jNhD9KwTboyI5X23hU9PNYmGgLYJNb0Vg0NJYZkCRLDmyYwT678VQH1ZkOes0",
	"u91d5BRFnJk3M+9xSOuRp6awRoNGz6eP3KcrKER4/OBMaenBOmPBoYTwelkqNbcCV/QPPIjCKlr4my+N",
	"SRbC8buI49YCn3KPTuqcVxGX2cD69Oz84vIu4kvjCoF8yqXG8zPeuUqNkIMjXy0KGGIV2zxkN4Y1ltt4",
	"XlX3xizuIUUe8YdCkW+NyWsQsrtxJljstSODpSgVzhdO6HQPtxBS84gXwiOMdyZAzF/TnxWinZdOzdHM",
	"HVgzzIHWp0mSS1RiETcrcWqKpOliUmxtXV6cSzyOv4vLn37+5TX8NYj/hZXWtarIVuplKDk1GkXNEBRC",
	"Kj7l96WSoGMrrFTK6F9zek+VU1oZ+NRJi9JoPuV/raRnHtxapsCkZ6WHjC22DFfADK7AtYuemSW7KZX/",
	"yKwSSPUzNIzqdSJFtpG4YkIzqT0KnQKZf6hbzyOuZAraQ6+YKyvSFbCzeMIjXjpKuyFss9nEIqzGxuVJ",
	"4+qT32fv3v95+/7kLJ7EKywUFYMSFUWrkdhtnSuP+BqcryucxJP4lGyNBS2s5FN+Hp8GWNoxQcxJ3u75",
	"HLBWd79JHwGdhDWErijpkYoTayGVWChgwdmzpXHBoG5Skwq7SlNTaiKTdo+giLOMMga8UirMGs8j7sBb",
	"Q2US+tlk0jILOuQjrFUyDd7Jvaek2pFFTxKhCI4/OljyKf8h2Q23pJlsST3WdiITzoltUF0/eKO4zxR7",
	"T26+TFPwflkq1rUj5ODLohBue2yzacOJPGypZiBSkJrG5DH8mWVV4stFY/8iaju3AF1DjhEYyr7tMEhQ",
	"ThSA4CizIdTsmsIRjhUONHZxJa2G6R09GcCzLAjjn1I6yPgUXQlRj5lPjqDq7o3rKuIXdcUDIvRaKJmx",
	"2TXzJeUIWW17sW8bMmDaIFuaUmfHaPWAeg7q1fcE24z4F+q19TpGrjctwttUa3uf+TJ6PRz9m1bsuH7G",
	"BGt318GXy3NMkz05vnnyjyeqx053n6RfAMaPcPLOgUBggmnYtBHomiYzoAsbPEiPUucH5kbt3dZW73Dw",
	"+JvJti8i6KjODXk42Ww2JzQ5TkqnQKcmg+wzhB3Se1yQPRafNhaoqYEtj8bB3jCsXqnwr1np7cFhdXl4",
	"WEltSxyoekyLo2LuDZvksXmYZVWNpgBhH/c6vGeCealzBb3wTxVd2+0Ufewx2DmMnIBdhl/mDPyfjo6m",
	"JwcPj8MdHptGzx8Qn6Rpdzh8Hxx9Fxv5q0nnOd5Hdn/VvR0C/SG0yKH5tLD7Nfj0w1X0vFfvGB1+Wrmr",
	"/g0AAP//UcU94BoUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
